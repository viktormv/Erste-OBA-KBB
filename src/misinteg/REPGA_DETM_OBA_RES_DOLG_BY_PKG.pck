CREATE OR REPLACE PACKAGE REPGA_DETM_OBA_RES_DOLG_BY_PKG IS
	-- %version   0.1   2012.10.11
	-- %author   Dörnyei László
	-- %usage loading package for stage area
	-- %intab tablelist:
	--                    REPGA_DETM_OBA_TBASE
	--                    REPGA_DETM_OBA_FIDB_R
	--
	-- %outtab tablelist: REPGA_DETM_OBA_RES_DOLG_BY
	PROCEDURE MAIN(P_SYM_RUN_DATE DATE DEFAULT EBH_PWM_PUBLIC_P.F_GETSYMRUNDATE);

END;
/
CREATE OR REPLACE PACKAGE BODY REPGA_DETM_OBA_RES_DOLG_BY_PKG IS
	-- %version   0.1   2012.10.11
	-- %author   Dörnyei László

	-- Procedure for calculating and loading data into REPGA_DETM_OBA_RES_DOLG_BY table
	-- %param p_sym_run_data: symbols running time <br>
	--                in form of date type
	-- %raises NO
	-- %dynasql NO
	-- %autonom NO
	-- %dbmsout NO
	------------------------------------------------------------------------
	-- %version   0.1   DL ERSTEOBA-3 INITIAL

	GC_APPNAME CONSTANT VARCHAR2(30) := 'REPGA_DETM_OBA_RES_DOLG_BY_PKG';

	GC_TARGETTABLE CONSTANT VARCHAR2(30) := 'REPGA_DETM_OBA_RES_DOLG_BY';

	GC_EUR_LIMIT NUMBER := 100000; -- OBA limit 100 000.- EUR

	G_HUF_LIMIT NUMBER := 0;

	G_PROCESSED NUMBER := 0;

	G_RUNID NUMBER;

	G_COMMITPOINT NUMBER := 200000;

	G_BATCHSIZE NUMBER := 5000;

	----------------------------------------
	PROCEDURE DELETE_TABLE(P_SYM_RUN_DATE DATE) IS
		C_ACCTION CONSTANT VARCHAR2(6) := 'DELETE';
	BEGIN
		REPGA_BACKOFFICE_PKG.API_ACTION(C_ACCTION);
		REPGA_UTIL_PKG.DELETE_TABLE(GC_TARGETTABLE,
																P_SYM_RUN_DATE);
	END;
	----------------------------------------
	PROCEDURE INSERT_TABLE(P_SYM_RUN_DATE DATE) IS
		C_ACCTION CONSTANT VARCHAR2(8) := 'INSERT';
		L_ROWNUMBER NUMBER := 0;
		L_INDEX     NUMBER := 0;
		L_LAST      NUMBER;

		--TYPE T_SYM_RUN_DATE IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.SYM_RUN_DATE%TYPE INDEX BY PLS_INTEGER;
		TYPE T_CLIENT_NO IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.CLIENT_NO%TYPE INDEX BY PLS_INTEGER;
		TYPE T_ACCOUNT_NO IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.ACCOUNT_NO%TYPE INDEX BY PLS_INTEGER;
		TYPE T_UA IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.UA%TYPE INDEX BY PLS_INTEGER;
		TYPE T_TIPUS IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.TIPUS%TYPE INDEX BY PLS_INTEGER;
		TYPE T_BJOGCIM IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.BJOGCIM%TYPE INDEX BY PLS_INTEGER;
		TYPE T_BAL_AMT IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.BAL_AMT%TYPE INDEX BY PLS_INTEGER;
		TYPE T_BAL_HUF IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.BAL_HUF%TYPE INDEX BY PLS_INTEGER;
		TYPE T_INT_HUF IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.INT_HUF%TYPE INDEX BY PLS_INTEGER;
		TYPE T_INT_TAX IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.INT_TAX%TYPE INDEX BY PLS_INTEGER;
		TYPE T_RESTRAINT IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.RESTRAINT%TYPE INDEX BY PLS_INTEGER;
		--TYPE T_RUN_ID IS TABLE OF REPGA_DETM_OBA_RES_DOLG_BY.RUN_ID%TYPE INDEX BY PLS_INTEGER;

		--L_SYM_RUN_DATE  T_SYM_RUN_DATE;
		L_CLIENT_NO  T_CLIENT_NO;
		L_ACCOUNT_NO T_ACCOUNT_NO;
		L_UA         T_UA;
		L_TIPUS      T_TIPUS;
		L_BJOGCIM    T_BJOGCIM;
		L_BAL_AMT    T_BAL_AMT;
		L_BAL_HUF    T_BAL_HUF;
		L_INT_HUF    T_INT_HUF;
		L_INT_TAX    T_INT_TAX;
		L_RESTRAINT  T_RESTRAINT;
		--L_RUN_ID  T_RUN_ID;

		CURSOR HC IS(

			SELECT CLIENT_NO,
						 ACCOUNT_NO,
						 UA,
						 DECODE(TIPUS,
										'B',
										'Betétszámla',
										'Folyószámla') || ' (' || CCY || ')' TIPUS,
						 BJOGCIM,
						 NVL(BAL_AMT,
								 0) BAL_AMT,
						 NVL(BAL_HUF,
								 0) BAL_HUF,
						 NVL(INT_HUF,
								 0) INT_HUF,
						 NVL(INTFEE,
								 0) INTFEE,
						 NVL(REST,
								 0) REST
				FROM (SELECT CLIENT_NO,
										 ACCOUNT_NO,
										 NULL UA,
										 S.TIPUS,
										 DECODE(ING,
														'Y',
														'ING',
														'ERSTE') BJOGCIM,
										 BAL_AMT,
										 CCY,
										 BAL_HUF,
										 INT_HUF,
										 INT_TAX INTFEE,
										 RESTRAINT REST
								FROM REPGA_DETM_OBA_TBASE  B,
										 REPGA_DETM_OBA_FIDB_R S
							 WHERE B.SYM_RUN_DATE = P_SYM_RUN_DATE
								 AND S.SYM_RUN_DATE = P_SYM_RUN_DATE
								 AND B.SRC_SYS = 0
								 AND S.CLIENT_NO = B.AZONOSITO
								 AND DOLG IS NOT NULL)

			);

	BEGIN
		REPGA_BACKOFFICE_PKG.API_ACTION(C_ACCTION);
		OPEN HC;
		LOOP
			REPGA_BACKOFFICE_PKG.API_ACTION(C_ACCTION || ' ' || TO_CHAR(L_ROWNUMBER));
			L_CLIENT_NO.DELETE;
			FETCH HC BULK COLLECT
				INTO L_CLIENT_NO, L_ACCOUNT_NO, L_UA, L_TIPUS, L_BJOGCIM, L_BAL_AMT, L_BAL_HUF, L_INT_HUF, L_INT_TAX, L_RESTRAINT LIMIT G_BATCHSIZE;
			L_LAST := L_CLIENT_NO.COUNT;
			EXIT WHEN L_LAST = 0;
			L_ROWNUMBER := L_ROWNUMBER + L_LAST;

			FORALL X IN 1 .. L_LAST
				INSERT INTO REPGA_DETM_OBA_RES_DOLG_BY
					(SYM_RUN_DATE,
					 CLIENT_NO,
					 ACCOUNT_NO,
					 UA,
					 TIPUS,
					 BJOGCIM,
					 BAL_AMT,
					 BAL_HUF,
					 INT_HUF,
					 INT_TAX,
					 RESTRAINT,
					 RUN_ID)
				VALUES
					(P_SYM_RUN_DATE,
					 L_CLIENT_NO(X),
					 L_ACCOUNT_NO(X),
					 L_UA(X),
					 L_TIPUS(X),
					 L_BJOGCIM(X),
					 L_BAL_AMT(X),
					 L_BAL_HUF(X),
					 L_INT_HUF(X),
					 L_INT_TAX(X),
					 L_RESTRAINT(X),
					 G_RUNID);
			IF L_INDEX >= G_COMMITPOINT THEN
				COMMIT;
				L_INDEX := 0;
			ELSE
				L_INDEX := L_INDEX + L_LAST;
			END IF;
		END LOOP;
		COMMIT;
		CLOSE HC;
		G_PROCESSED := G_PROCESSED + L_ROWNUMBER;
	END;

	----------------------------------------
	PROCEDURE PREPROCESS(P_SYM_RUN_DATE DATE) IS
		C_ACCTION CONSTANT VARCHAR2(10) := 'PREPROCESS';
	BEGIN
		REPGA_BACKOFFICE_PKG.API_ACTION(C_ACCTION);
		G_BATCHSIZE   := REPGA_UTIL_PKG.GET_BATCHSIZE(GC_TARGETTABLE,
																									G_BATCHSIZE);
		G_COMMITPOINT := REPGA_UTIL_PKG.GET_COMMITPOINT(GC_TARGETTABLE,
																										G_COMMITPOINT);
		REPGA_UTIL_PKG.CLEANUP(P_SYM_RUN_DATE => P_SYM_RUN_DATE,
													 P_APPNAME      => GC_APPNAME,
													 P_TARGETNAME   => GC_TARGETTABLE);

		G_HUF_LIMIT := CONV_AMT_MTH(P_SYM_RUN_DATE,
																'EUR',
																GC_EUR_LIMIT,
																'HUF');

	END;
	----------------------------------------
	PROCEDURE POSTPROCESS(P_SYM_RUN_DATE DATE) IS
		C_ACCTION CONSTANT VARCHAR2(11) := 'POSTPROCESS';
	BEGIN
		REPGA_BACKOFFICE_PKG.API_ACTION(C_ACCTION);
		REPGA_UTIL_PKG.HOUSE_KEEPING(P_SYM_RUN_DATE => P_SYM_RUN_DATE,
																 P_APPNAME      => GC_APPNAME,
																 P_TARGETNAME   => GC_TARGETTABLE);
	END;
	----------------------------------------
	PROCEDURE MAIN(P_SYM_RUN_DATE DATE DEFAULT EBH_PWM_PUBLIC_P.F_GETSYMRUNDATE) IS
	BEGIN
		G_RUNID     := REPGA_BACKOFFICE_PKG.START_API(P_APPNAME      => GC_APPNAME,
																									P_SYM_RUN_DATE => P_SYM_RUN_DATE);
		G_PROCESSED := 0;
		PREPROCESS(P_SYM_RUN_DATE);
		DELETE_TABLE(P_SYM_RUN_DATE);
		INSERT_TABLE(P_SYM_RUN_DATE);
		POSTPROCESS(P_SYM_RUN_DATE);
		REPGA_BACKOFFICE_PKG.END_API(G_PROCESSED);
	EXCEPTION
		WHEN OTHERS THEN
			REPGA_BACKOFFICE_PKG.END_ERROR_API(SQLCODE,
																				 SQLERRM);
	END;

END;
/
